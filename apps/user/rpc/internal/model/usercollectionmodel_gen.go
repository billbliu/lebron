// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userCollectionFieldNames          = builder.RawFieldNames(&UserCollection{})
	userCollectionRows                = strings.Join(userCollectionFieldNames, ",")
	userCollectionRowsExpectAutoSet   = strings.Join(stringx.Remove(userCollectionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userCollectionRowsWithPlaceHolder = strings.Join(stringx.Remove(userCollectionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserUserCollectionIdPrefix           = "cache:user:userCollection:id:"
	cacheUserUserCollectionUidProductIdPrefix = "cache:user:userCollection:uid:productId:"
)

type (
	userCollectionModel interface {
		Insert(ctx context.Context, data *UserCollection) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserCollection, error)
		FindOneByUidProductId(ctx context.Context, uid uint64, productId uint64) (*UserCollection, error)
		Update(ctx context.Context, data *UserCollection) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserCollectionModel struct {
		sqlc.CachedConn
		table string
	}

	UserCollection struct {
		Id         uint64    `db:"id"`          // 收藏Id
		Uid        uint64    `db:"uid"`         // 用户id
		ProductId  uint64    `db:"product_id"`  // 商品id
		IsDelete   uint64    `db:"is_delete"`   // 是否删除
		CreateTime time.Time `db:"create_time"` // 数据创建时间[禁止在代码中赋值]
		UpdateTime time.Time `db:"update_time"` // 数据更新时间[禁止在代码中赋值]
	}
)

func newUserCollectionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserCollectionModel {
	return &defaultUserCollectionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_collection`",
	}
}

func (m *defaultUserCollectionModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userUserCollectionIdKey := fmt.Sprintf("%s%v", cacheUserUserCollectionIdPrefix, id)
	userUserCollectionUidProductIdKey := fmt.Sprintf("%s%v:%v", cacheUserUserCollectionUidProductIdPrefix, data.Uid, data.ProductId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userUserCollectionIdKey, userUserCollectionUidProductIdKey)
	return err
}

func (m *defaultUserCollectionModel) FindOne(ctx context.Context, id uint64) (*UserCollection, error) {
	userUserCollectionIdKey := fmt.Sprintf("%s%v", cacheUserUserCollectionIdPrefix, id)
	var resp UserCollection
	err := m.QueryRowCtx(ctx, &resp, userUserCollectionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCollectionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCollectionModel) FindOneByUidProductId(ctx context.Context, uid uint64, productId uint64) (*UserCollection, error) {
	userUserCollectionUidProductIdKey := fmt.Sprintf("%s%v:%v", cacheUserUserCollectionUidProductIdPrefix, uid, productId)
	var resp UserCollection
	err := m.QueryRowIndexCtx(ctx, &resp, userUserCollectionUidProductIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uid` = ? and `product_id` = ? limit 1", userCollectionRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid, productId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCollectionModel) Insert(ctx context.Context, data *UserCollection) (sql.Result, error) {
	userUserCollectionIdKey := fmt.Sprintf("%s%v", cacheUserUserCollectionIdPrefix, data.Id)
	userUserCollectionUidProductIdKey := fmt.Sprintf("%s%v:%v", cacheUserUserCollectionUidProductIdPrefix, data.Uid, data.ProductId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userCollectionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.ProductId, data.IsDelete)
	}, userUserCollectionIdKey, userUserCollectionUidProductIdKey)
	return ret, err
}

func (m *defaultUserCollectionModel) Update(ctx context.Context, newData *UserCollection) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userUserCollectionIdKey := fmt.Sprintf("%s%v", cacheUserUserCollectionIdPrefix, data.Id)
	userUserCollectionUidProductIdKey := fmt.Sprintf("%s%v:%v", cacheUserUserCollectionUidProductIdPrefix, data.Uid, data.ProductId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userCollectionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uid, newData.ProductId, newData.IsDelete, newData.Id)
	}, userUserCollectionIdKey, userUserCollectionUidProductIdKey)
	return err
}

func (m *defaultUserCollectionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserUserCollectionIdPrefix, primary)
}

func (m *defaultUserCollectionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCollectionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserCollectionModel) tableName() string {
	return m.table
}
